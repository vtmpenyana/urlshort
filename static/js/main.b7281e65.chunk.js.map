{"version":3,"sources":["components/InputField.js","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["InputField","props","className","placeholder","attention","type","onChange","onInput","App","event","setState","originalUrl","target","value","shorten","state","baseURL","fetch","then","resp","json","data","output","result","short_link","shortUrl","catch","this","alt","src","logo","success","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"8NAgBeA,G,MAdI,SAACC,GAChB,OACI,yBAAKC,UAAU,UACX,2BACAC,YAAY,6CACZD,UAAS,WAAMD,EAAMG,UAAZ,yDACTC,KAAK,OACLC,SAAUL,EAAMM,a,gBC6CbC,E,kDA/Cb,aAAc,IAAD,8BACX,gBAOFD,QAAU,SAACE,GACT,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAT9B,EAYbC,QAAU,WACR,GAA8B,KAA3B,EAAKC,MAAMJ,YAAmB,CAC/B,IAAMK,EAAU,wCAA0C,EAAKD,MAAMJ,YACvEM,MAAMD,GACLE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,IAAIC,EAASD,EAAKE,OAAOC,WACzB,EAAKd,SAAS,CAACe,SAASH,OACzBI,OAAM,WACP,EAAKhB,SAAS,CAACe,SAAS,2EAIxB,EAAKf,SAAS,CAACN,UAAW,yBAvB5B,EAAKW,MAAQ,CACXJ,YAAa,GACbc,SAAU,qDAJD,E,qDA6BJ,IACFA,EAAYE,KAAKZ,MAAjBU,SACL,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKA,UAAU,eAAc,yBAAK0B,IAAI,OAAOC,IAAKC,OAChD,kBAAC,EAAD,CAAY1B,UAAWuB,KAAKZ,MAAMX,UAAWG,QAASoB,KAAKpB,UAC3D,yBAAKL,UAAU,gBAAe,4BAAKyB,KAAKI,UACtC,uBAAG7B,UAAU,wCAAwC8B,KAAMP,GAAU,4BAAKA,IAC5E,yBAAKvB,UAAU,MACb,4BAAQA,UAAU,6BAA6B+B,QAASN,KAAKb,SAA7D,wB,GAxCMoB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.b7281e65.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputField = (props) => {\r\n    return(\r\n        <div className='tc ma4'>\r\n            <input \r\n            placeholder='paste your long url here and Make it Short'\r\n            className={` ${props.attention} o-80 input-reset ba b--black-20 pa2 mb2 db w-100 mt4`}\r\n            type='text'\r\n            onChange={props.onInput}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InputField;","import React from 'react';\nimport './App.css';\nimport InputField from './components/InputField';\nimport logo from './images/logo.png';\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      originalUrl: '',\n      shortUrl: 'Your shortened URL will appear here! ðŸ˜Ž'\n    }\n  }\n\n  onInput = (event) => {\n    this.setState({originalUrl: event.target.value});\n  }\n\n  shorten = () => {\n    if(this.state.originalUrl !== ''){\n      const baseURL = 'https://api.shrtco.de/v2/shorten?url=' + this.state.originalUrl;\n    fetch(baseURL)\n    .then(resp => resp.json())\n    .then(data => {\n        let output = data.result.short_link\n        this.setState({shortUrl:output})\n    }).catch(() =>{\n      this.setState({shortUrl: `Please ensure that you have provided a valid link.ðŸ™„`})\n    });\n    }\n    else{\n      this.setState({attention: 'animated zoomInLeft'})\n    }\n  }\n\n  render(){\n    let {shortUrl} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className='tc ma4 logo'><img alt='logo' src={logo}/></div>\n          <InputField attention={this.state.attention} onInput={this.onInput}/>\n          <div className='tc ma3 white'><h3>{this.success}</h3></div>\n            <a className='tc fw6 db white link hover-light-pink' href={shortUrl}><h1>{shortUrl}</h1></a>\n          <div className='tc'>\n            <button className='btn btn-primary btn-lg ma4' onClick={this.shorten}>Make it Short</button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'animate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.be492540.png\";"],"sourceRoot":""}